

Progress:

Implementing basic features:
    Store passwords securely.
    Add new passwords.
    Retrieve existing passwords.
    Delete passwords.



Write a function to save a password.
Write a function to read all passwords. 

C++ concepts
    File I/O for storing and retrieving passwords.
    Data encryption and decryption for security.
    Classes and objects for managing passwords.
    User input and output for interaction.


add encryption

OpenSSL:
    The functionality includes symmetric encryption, public key cryptography, 
    key agreement, certificate handling, cryptographic hash functions, 
    cryptographic pseudo-random number generators, message authentication codes (MACs), 
    key derivation functions (KDFs), and various utilities.

features to add:
    alphabetize by services
    adding two-factor authentication


Using SQLite, specifically sqlite3 API 
    - serverless database (does not require a separate server -> simple deploy and manage)
    - lightweight (disk space and memory usage)
Embedded database for local/client storage  
Follows ACID properties (atomicity, consistency, isolation, & durability)
Almost all OS supports it

--------------------------------------------------------------
Regarding OpenSSL: (from stackoverflow)
    - Don't use AES_encrypt & AES_decrypt. Low level, harder to use, does not use hardware acceleration,
    like AES-NI. Subject to endianess, "byte order" how bytes are ordered in data, issues on obscure platforms.
    - Use EVP_*. Uses hardware acceleration and does not suffer from endianess issues 
    -you can use a mode like CBC, but the ciphertext will lack integrity and authenticity 
    assurances. So you usually want a mode like EAX, CCM, or GCM. (Or you manually 
    have to apply a HMAC after the encryption under a separate key.)
    